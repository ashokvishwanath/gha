name: Build, Push, and Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'services/**'
      - 'charts/**'
      - '.github/workflows/**'
  pull_request:
    branches:
      - main
    paths:
      - 'services/**'
      - 'charts/**'
  workflow_dispatch:
    inputs:
      deploy_only:
        description: 'Deploy only (skip build)'
        type: boolean
        default: false
      environment:
        description: 'Environment to deploy to'
        type: choice
        options:
          - dev
          - staging
          - prod
        default: 'dev'
        required: true

env:
  DOCKER_HUB_REPO: ashokvsetty

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || !inputs.deploy_only }}
    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v4

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: üèóÔ∏è Build and push frontend image
        run: |
          # Show the content of index.html before building
          echo "Content of index.html before building:"
          cat ./services/frontend/index.html | grep "Service C"
          
          # Add a timestamp to bust cache
          echo "Building with timestamp: $(date)" > ./services/frontend/build_timestamp.txt
          
          # Build with no-cache to ensure fresh build
          docker build --no-cache -t ${{ env.DOCKER_HUB_REPO }}/3-tier-microservices-frontend:latest ./services/frontend
          docker push ${{ env.DOCKER_HUB_REPO }}/3-tier-microservices-frontend:latest

      - name: üèóÔ∏è Build and push service-a image
        run: |
          docker build -t ${{ env.DOCKER_HUB_REPO }}/3-tier-microservices-service-a:latest ./services/service-a
          docker push ${{ env.DOCKER_HUB_REPO }}/3-tier-microservices-service-a:latest

      - name: üèóÔ∏è Build and push service-b image
        run: |
          docker build -t ${{ env.DOCKER_HUB_REPO }}/3-tier-microservices-service-b:latest ./services/service-b
          docker push ${{ env.DOCKER_HUB_REPO }}/3-tier-microservices-service-b:latest

      - name: üèóÔ∏è Build and push service-c image
        run: |
          docker build -t ${{ env.DOCKER_HUB_REPO }}/3-tier-microservices-service-c:latest ./services/service-c
          docker push ${{ env.DOCKER_HUB_REPO }}/3-tier-microservices-service-c:latest
          
  deploy:
    needs: [build-and-push]
    if: ${{ success() || inputs.deploy_only }}
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v4
      
      - name: üîê Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: ‚ò∏Ô∏è Set up kubectl
        uses: google-github-actions/get-gke-credentials@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
          location: ${{ secrets.GKE_ZONE }}
      
      - name: üîß Set up Helm
        uses: azure/setup-helm@v3
      
      - name: üöÄ Deploy to Kubernetes
        run: |
          # Create a temporary directory for modified chart
          mkdir -p /tmp/chart
          cp -r ./charts/microservices/* /tmp/chart/
          
          # Instead of modifying the image tag, add a unique annotation to force a rollout
          TIMESTAMP=$(date +%s)
          sed -i "s/rollme:.*/rollme: \"$TIMESTAMP\"/g" /tmp/chart/templates/frontend-deployment.yaml
          
          # Check if the ingress already exists in default namespace and delete it if needed
          if kubectl get ingress microservices-ingress -n default &> /dev/null; then
            echo "Deleting existing ingress in default namespace"
            kubectl delete ingress microservices-ingress -n default
          fi
          
          # Deploy with Helm using the modified chart
          helm upgrade --install microservices /tmp/chart --namespace microservices --create-namespace
      
      - name: üîç Check deployment status
        run: |
          echo "Waiting for deployments to be ready..."
          # Increase timeout for kubectl rollout status
          kubectl rollout status deployment/frontend -n microservices --timeout=300s || true
          kubectl rollout status deployment/service-a -n microservices --timeout=300s || true
          kubectl rollout status deployment/service-b -n microservices --timeout=300s || true
          
          # Verify deployments are actually running regardless of timeout
          echo "Verifying deployments are running..."
          kubectl get deployments -n microservices
          
          # Check if pods are running
          echo "Checking pod status..."
          kubectl get pods -n microservices
      
      - name: üåê Get Ingress IP
        run: |
          echo "Waiting for external IP..."
          for i in {1..20}; do
            IP=$(kubectl get ingress microservices-ingress -n microservices -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
            if [[ -n "$IP" ]]; then
              echo "Application is accessible at: http://$IP"
              break
            fi
            echo "Waiting for IP... (attempt $i/20)"
            sleep 15
          done

      - name: üîÑ Force restart of frontend deployment
        run: |
          echo "Forcing restart of frontend deployment..."
          kubectl rollout restart deployment/frontend -n microservices
          kubectl rollout status deployment/frontend -n microservices --timeout=300s

      - name: üîç Verify frontend content
        run: |
          echo "Verifying frontend content..."
          POD_NAME=$(kubectl get pods -n microservices -l app=frontend -o jsonpath='{.items[0].metadata.name}')
          kubectl exec -n microservices $POD_NAME -- cat /usr/share/nginx/html/index.html | head -20

      - name: üîç Check service-c deployment
        run: |
          echo "Checking service-c deployment..."
          kubectl get deployment service-c -n microservices
          kubectl get pods -n microservices -l app=service-c
          kubectl get service service-c -n microservices
          
          # Test service-c endpoint using kubectl port-forward
          echo "Testing service-c endpoint..."
          POD_NAME=$(kubectl get pods -n microservices -l app=service-c -o jsonpath='{.items[0].metadata.name}')
          
          # Start port-forward in the background
          kubectl port-forward -n microservices $POD_NAME 5000:5000 &
          PF_PID=$!
          
          # Wait for port-forward to establish
          sleep 5
          
          # Test the endpoint
          curl -s http://localhost:5000
          
          # Kill the port-forward process
          kill $PF_PID
