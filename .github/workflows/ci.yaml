name: Build, Push, and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy_only:
        description: 'Deploy only (skip build)'
        type: boolean
        default: false

env:
  DOCKER_HUB_REPO: ashokvsetty

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || !inputs.deploy_only }}
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏗️ Build and push frontend image
        run: |
          docker build -t ${{ env.DOCKER_HUB_REPO }}/3-tier-microservices-frontend:latest ./services/frontend
          docker push ${{ env.DOCKER_HUB_REPO }}/3-tier-microservices-frontend:latest

      - name: 🏗️ Build and push service-a image
        run: |
          docker build -t ${{ env.DOCKER_HUB_REPO }}/3-tier-microservices-service-a:latest ./services/service-a
          docker push ${{ env.DOCKER_HUB_REPO }}/3-tier-microservices-service-a:latest

      - name: 🏗️ Build and push service-b image
        run: |
          docker build -t ${{ env.DOCKER_HUB_REPO }}/3-tier-microservices-service-b:latest ./services/service-b
          docker push ${{ env.DOCKER_HUB_REPO }}/3-tier-microservices-service-b:latest
          
  deploy:
    needs: [build-and-push]
    if: ${{ success() || inputs.deploy_only }}
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4
      
      - name: 🔐 Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: ☸️ Set up kubectl
        uses: google-github-actions/get-gke-credentials@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
          location: ${{ secrets.GKE_ZONE }}
      
      - name: 🔧 Set up Helm
        uses: azure/setup-helm@v3
      
      - name: 🚀 Deploy to Kubernetes
        run: |
          helm upgrade --install microservices ./charts/microservices --namespace microservices --create-namespace
      
      - name: 🔍 Check deployment status
        run: |
          echo "Waiting for deployments to be ready..."
          kubectl rollout status deployment/frontend -n microservices
          kubectl rollout status deployment/service-a -n microservices
          kubectl rollout status deployment/service-b -n microservices
      
      - name: 🌐 Get Ingress IP
        run: |
          echo "Waiting for external IP..."
          for i in {1..20}; do
            IP=$(kubectl get ingress microservices-ingress -n microservices -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
            if [[ -n "$IP" ]]; then
              echo "Application is accessible at: http://$IP"
              break
            fi
            echo "Waiting for IP... (attempt $i/20)"
            sleep 15
          done
